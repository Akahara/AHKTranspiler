%include "intrinsic.asm"

global ker_init
global ker_exit
global ahk_Kernel_argv
global ahk_Kernel_argc_get
global ahk_Kernel_argc_count
global ahk_Kernel_sleep
global ahk_Kernel_nanosleep

section .data

extern mem_alloc_blockf

sleep_timespec:
  timespec_sec dq 0
  timespec_usec dq 0

section .bss

; argv, the address pointing to the array of process argument
; strings
ahk_Kernel_argv resq 1


section .text
  
  
ker_exit:
  ; the stack frame is not necessary
  ; but used for consistency
  push rbp
  mov rbp,rsp
  
  mov rdi,[rbp+16]
  mov rax,SYSCALL_EXIT
  syscall
  

ker_init:
  push rbp
  mov rbp,rsp
  
  sub rsp,8
  
  mov rax,[rbp+24] ; argc
  imul rax,8
  push rax
  call mem_alloc_blockf
  mov [ahk_Kernel_argv],rax
  mov [rsp],rax ; ptr
  
.alloc_str:
  mov rax,[rbp+24] ; argc
  test rax,rax
  jz .alloc_end
  dec rax
  mov [rbp+24],rax ; new argc
  
  mov rbx,[rbp+16] ; argv
  mov rax,-1
.search_str_end:
  inc rax
  mov cl,[rbx+rax]
  test cl,cl
  jnz .search_str_end
  
  lea rcx,[rax+rbx+1]
  mov [rbp+16],rcx ; new argv
  
  push rax ; store temporarily
  push rbx ; store temporarily
  push rax ; pass the size of the string to alloc()
  call mem_alloc_blockf
  
  pop rsi ; begining of the string
  pop rcx ; length of the string
  mov rdi,rax ; address of the copy
  cld
  rep movsb
  
  mov rbx,[rsp] ; ptr
  mov [rbx],rax
  add rbx,8
  mov [rsp],rbx ; new ptr
  
  jmp .alloc_str
  
.alloc_end:
  
  mov rsp,rbp
  pop rbp
  ret
  
  
dbg_print_fpu_status:
;  push rbp
;  mov rbp,rsp
;  sub rsp,8
;  fstsw [rsp]
;  call ahk_Kernel_print_hex
;  call ahk_Kernel_print_ln
;  mov rsp,rbp
;  pop rbp
  ret
  
  
; sleeps for the given amount of time (in seconds)
ahk_Kernel_sleep:
  push rbp
  mov rbp,rsp
  mov rax,SYSCALL_NANOSLEEP
  mov rdi,sleep_timespec
  mov rbx,[rbp+16]
  mov [timespec_sec],rbx
  mov qword [timespec_usec],0
  xor rsi,rsi
  syscall
  mov rsp,rbp
  pop rbp
  ret 8
  
  
; sleeps for the given amount of time (in nanoseconds)
ahk_Kernel_nanosleep:
  push rbp
  mov rbp,rsp
  mov rax,[rbp+16]
  xor rdx,rdx
  mov rbx,1000000000
  idiv rbx
  mov [timespec_sec],rax
  mov [timespec_usec],rdx
  mov rax,SYSCALL_NANOSLEEP
  mov rdi,sleep_timespec
  xor rsi,rsi
  syscall
  mov rsp,rbp
  pop rbp
  ret 8
