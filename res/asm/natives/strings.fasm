%include "intrinsic.asm"

global ahk_Strings_print_int2hexstr
global ahk_Strings_int2hexstr
global ahk_Strings_print_int2str
global ahk_Strings_int2str
global ahk_Strings_print_bool2str
global ahk_Strings_bool2str
global ahk_Strings_float2str
global ahk_Strings_print_float2str

global ahk_Strings_print_str
global ahk_Strings_print_ln
global ahk_Strings_print_unnormalizedstr

extern mem_alloc_blockf
extern global_floatst

section .data

ln_chars db `\n`
ln_chars_len equ $-ln_chars
hex_chars db '0x****************'    ; hexadecimal characters
hex_chars_len equ $-hex_chars
db '|'
dec_chars db '-********************' ; decimal characters, a 64 bits integer will always fit in 20 digites and the - sign
                                     ; this also stands for 64 bits floating point fractional and integer parts
dec_chars_len equ $-dec_chars
db '|'
float_chars db '-********************.********' ; floating point characters (the . will be moved), the fractional part matches float_precision
float_chars_len equ $-float_chars
def_string true_chars,'true'
def_string false_chars,'false'
float_precision dq __float64__(1e8)

section .text


; ==============================================================
; Copies a character array to a new memory block (a new string).
;   parameters:
;     u8 size - the size (in characters) of the string
;     u8 str  - the string address
;   return value: the allocated block address
; ==============================================================
store_str2memblock:
  push rbp
  mov rbp,rsp
  
  push qword [rbp+24]
  call mem_alloc_blockf
  
  mov rdi,rax
  mov rsi,[rbp+16]
  mov rcx,[rbp+24]
  rep movsb
  
  mov rsp,rbp
  pop rbp
  ret 16


; ==============================================================
; Writes an integer hexadecimal representation to a string.
; See #write_int2hex
;   parameters:
;     u8 x - the integer to write to hexadecimal
;   return value: the allocated string
; ==============================================================
ahk_Strings_int2hexstr:
  push rbp
  mov rbp,rsp
  
  push qword [rbp+16]
  call write_int2hex
  
  push qword hex_chars_len
  push hex_chars
  call store_str2memblock
  
  mov rsp,rbp
  pop rbp
  ret 8
  

; ==============================================================
; Writes an integer hexadecimal representation to a stream.
; See #write_int2hex
;   parameters:
;     u8 x   - the integer to write as hexadecimal
;     u8 out - the file descriptor entry to write to (ie STD_OUT)
;   return value: none
; ==============================================================
ahk_Strings_print_int2hexstr:
  push rbp
  mov rbp,rsp
  
  push qword [rbp+24]
  call write_int2hex
  
  mov rax,SYSCALL_WRITE
  mov rdi,[rbp+16]
  mov rsi,hex_chars
  mov rdx,hex_chars_len
  syscall
  
  mov rsp,rbp
  pop rbp
  ret 16


; ==============================================================
; Writes an integer hexadecimal representation. Characters are
; stored in #hex_chars, they can then be output to a stream or
; converted to a string.
; Leading zeros are not removed.
;   parameters:
;     u8 x - the integer to write as hexadecimal
;   return value: none
; ==============================================================
write_int2hex:
  push rbp
  mov rbp,rsp
  
  mov rax,[rbp+16]
  
  mov rcx,16
.loop:
  mov rbx,rax
  and rbx,0xf
  cmp rbx,10
  jl .ignore
  add rbx,39 ; handle alphanumerical digits
.ignore:
  add rbx,48
  mov [hex_chars+rcx+1],bl
  shr rax,4
  loop .loop
  
  mov rsp,rbp
  pop rbp
  ret 8
  
  
; ==============================================================
; Returns the string associated to a boolean value. Either 'true'
; or 'false'.
; See #write_bool2str
;   parameters:
;     u8 b - the boolean to 'write' as a string
;   return value:
;     true_chars or false_chars, depending on the input
; ==============================================================
ahk_Strings_bool2str:
  jmp write_bool2str
  

; ==============================================================
; Writes a boolean value to a stream.
; See #write_bool2str
;   parameters:
;     u8 b   - the bolean
;     u8 out - the file descriptor entry to write to (ie STD_OUT)
;   return value: none
; ==============================================================
ahk_Strings_print_bool2str:
  push rbp
  mov rbp,rsp
  
  push qword [rbp+24]
  call write_bool2str
  
  push rax
  push qword [rbp+16]
  call ahk_Strings_print_str
  
  mov rsp,rbp
  pop rbp
  ret 16
  
  
; ==============================================================
; Writes a boolean value as a string.
; Both 'true' and 'false' strings are cached as global variables,
; this method returns one of theim and does not write characters
; anywhere.
;   parameters:
;     u8 b - the boolean to 'write' as a string
;   return value:
;     true_chars or false_chars, depending on the input
; ==============================================================
write_bool2str:
  push rbp
  mov rbp,rsp
  
  mov rbx,[rbp+16]
  mov rax,true_chars
  test rbx,rbx
  jnz .true_str
  mov rax,false_chars
.true_str:

  mov rsp,rbp
  pop rbp
  ret 8
  
  
; ==============================================================
; Prints a string which length is stored as a qword before the
; string characters. See the intrinsic.fasm#def_string macro
; if the string does not use this convention this function will
; have undefined behavior
;   parameters:
;     u8 str - the string
;     u8 out - the file descriptor entry to write to (ie STD_OUT)
;   return value: none
; ==============================================================
ahk_Strings_print_str:
  push rbp
  mov rbp,rsp
  
  mov rax,SYSCALL_WRITE
  mov rdi,[rbp+16] ; out
  mov rsi,[rbp+24] ; str
  mov rdx,[rsi-8]  ; length(str)
  syscall
  
  mov rsp,rbp
  pop rbp
  ret 16
  

; ==============================================================
; Prints a string which length is not necessarily stored before
; its characters (mainly for compatibility with other languages)
; can be used to print an array of characters.
;   parameters:
;     u8 strlen - the string length
;     u8 str    - the string
;     u8 out    - the file descriptor entry to write to (ie STD_OUT)
;   return value: none
; ==============================================================
ahk_Strings_print_unnormalizedstr:
  push rbp
  mov rbp,rsp
  
  mov rax,SYSCALL_WRITE
  mov rdi,[rbp+16] ; out
  mov rsi,[rbp+24] ; str
  mov rdx,[rbp+32] ; strlen
  syscall
  
  mov rsp,rbp
  pop rbp
  ret 16
  
  
; ==============================================================
; Writes the newline character to a stream.
;   parameters:
;     u8 out - the file descriptor entry to write to (ie STD_OUT)
;   return value: none
; ==============================================================
ahk_Strings_print_ln:
  push rbp
  mov rbp,rsp
  
  mov rax,SYSCALL_WRITE
  mov rdi,[rbp+16]
  mov rsi,ln_chars
  mov rdx,ln_chars_len
  syscall
  
  mov rsp,rbp
  pop rbp
  ret 8
  
  
; ==============================================================
; Writes an integer to a stream.
; See #write_int2decstr
;   parameters:
;     u8 x   - the integer
;     u8 out - the file descriptor entry to write to (ie STD_OUT)
;   return value: none
; ==============================================================
ahk_Strings_print_int2str:
  push rbp
  mov rbp,rsp
  
  push qword [rbp+24]
  call write_int2decstr
  
  mov rsi,rax
  mov rax,SYSCALL_WRITE
  mov rdi,[rbp+16]
  mov rdx,rbx
  syscall
  
  mov rsp,rbp
  pop rbp
  ret 16
  

; ==============================================================
; Writes an integer to a string.
; See #write_int2decstr
;   parameters:
;     u8 x - the integer
;   return value:
;     the allocated string
; ==============================================================
ahk_Strings_int2str:
  push rbp
  mov rbp,rsp
  
  push qword [rbp+16]
  call write_int2decstr
  
  push rbx
  push rax
  call store_str2memblock
  
  mov rsp,rbp
  pop rbp
  ret 8
  
  
; ==============================================================
; Writes an integer as a string. Characters are stored in
; #dec_chars, they can then be output to a stream or converted
; to a string.
; The characters are written right to left, using successive
; divisions. The begining of the character array is not necessarily
; #dec_chars, it may be further if less characters are needed, so
; the array pointer is returned.
;   parameters:
;     u8 x   - the integer
;   return value:
;     rax - the address of the string in dec_chars
;     rbx - the number of characters used
; ==============================================================
write_int2decstr:
  push rbp
  mov rbp,rsp

  mov rcx,20
  mov rax,[rbp+16] ; rax holds the number
  mov rbx,rax      ; get absolute
  sar rbx,31
  xor rax,rbx
  sub rax,rbx      ;/get absolute
  mov rbx,10       ; prepare for division
 
  ; get indivudual characters
.loop:
  xor rdx,rdx     ; clear dividende for division
  div rbx
  add rdx,'0'
  mov [dec_chars+rcx],dl
  dec rcx
  test rax,rax
  jnz .loop
  
  ; add sign
  mov rax,[rbp+16]
  test rax,rax
  jns .positive
  mov [dec_chars+rcx],byte '-'
  dec rcx
.positive:
  
  lea rax,[dec_chars+rcx+1]
  mov rbx,20
  sub rbx,rcx
  
  mov rsp,rbp
  pop rbp
  ret 8
  

; ==============================================================
; Writes a float number as a string. Characters are stored in
; #float_chars, they can then be output to a stream or converted
; to a string.
; To write the float's characters, its integer part is taken
; and written using #write_int2decstr, a dot is added and its
; fractional part is written the same way. The number of decimals
; depends on #float_precision.
; Currently values which integer part exceed the 64 bits int
; limit will be printed as if they did not, producing undefined
; characters.
;   parameters:
;     u8 x - the float
;   return value: none
; ==============================================================
write_float2str:
  push rbp
  mov rbp,rsp
  
  mov rax,[rbp+16]
  mov [global_floatst],rax
  fld qword [global_floatst]
  fabs
  fld ST0 ; duplicate ST0
  fistp qword [global_floatst]
  mov rax,[global_floatst]
  push rax
  call write_int2decstr

  mov rdi,float_chars
  
  ; the - sign must be added manually because  otherwise 
  ; -0.2 would be '-0 as integer'.'2 as integer' wich
  ; would result in '0.2'
  cmp qword [rbp+16],0
  jge .positive
  mov [rdi],byte '-'
  inc rdi
.positive:

  mov rsi,rax
  mov rcx,rbx
  cld
  rep movsb
  mov [rdi],byte '.'
  inc rdi
  push rdi
  
  fild qword [global_floatst]
  fsub
  fabs
  fmul qword [float_precision]
  fistp qword [global_floatst]
  mov rax,[global_floatst]
  push rax
  call write_int2decstr
  
  dec rbx
  test rbx,rbx
  jz .not_zero
.trim_zeros:
  cmp [rax+rbx],byte '0'
  jne .not_zero
  dec rbx
  jnz .trim_zeros
.not_zero:
  inc rbx

  pop rdi
  mov rsi,rax
  mov rcx,rbx
  cld
  rep movsb
  
  mov rax,rdi
  sub rax,float_chars
  
  mov rsp,rbp
  pop rbp
  ret 8
  
  
; ==============================================================
; Writes a float number to a stream.
; See #write_float2str
;   parameters:
;     u8 x   - the float
;     u8 out - the file descriptor entry to write to (ie STD_OUT)
;   return value: none
; ==============================================================
ahk_Strings_print_float2str:
  push rbp
  mov rbp,rsp
  
  push qword [rbp+24]
  call write_float2str
  
  mov rdx,rax
  mov rax,SYSCALL_WRITE
  mov rdi,[rbp+16]
  mov rsi,float_chars
  syscall
  
  mov rsp,rbp
  pop rbp
  ret 16
  
  
; ==============================================================
; Writes a float number to a string.
; See #write_float2str
;   parameters:
;     u8 x   - the float
;   return value:
;     the allocated string
; ==============================================================
ahk_Strings_float2str:
  push rbp
  mov rbp,rsp
  
  push qword [rbp+16]
  call write_float2str
  
  push rax
  push float_chars
  call store_str2memblock
  
  mov rsp,rbp
  pop rbp
  ret 8
  
  